<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Welcome.
tydsp_init(8000, 0.15);
t = 0;

tuneStackReg = 0;
tunePaused = false;
tuneSpeed = 1;
tuneRate = 8000;
drawInfo = true;

pauseCtr = 0;

QUADDAMAGE = false;

/**
=======================================
    EGGNOGG+ EXCLUSIVE VARIABLES.
       (Completely Optional.)
=======================================
**/
tuneX = 0;
tuneY = 0;
tuneU = 0;
tuneV = 0;

tuneIndex = 0;
tunes = -1;

tunes[0, 0] = tune_hardnogg;
tunes[0, 1] = 8000;
tunes[0, 2] = "HARDNOGG+ 303";

tunes[1, 0] = tune_technogg_carnival;
tunes[1, 1] = 8000;
tunes[1, 2] = "TECHNOGG CARNIVAL '92";

tunes[2, 0] = tune_idontmind;
tunes[2, 1] = 8000;
tunes[2, 2] = "I DON'T MIND";

tunes[3, 0] = tune_hardcore_ryg;
tunes[3, 1] = 44100;
tunes[3, 2] = "H4RD SH!T by ryg";

tunes[4, 0] = tune_weeowweeow;
tunes[4, 1] = 8000;
tunes[4, 2] = "FRACTAL TREE";

tunes[5, 0] = tune_lemmings_viznut;
tunes[5, 1] = 8000;
tunes[5, 2] = "Lemmings march by viznut";

tunes[6, 0] = tune_rollin;
tunes[6, 1] = 8000;
tunes[6, 2] = "Rollin'";

tunes[7, 0] = tune_6689;
tunes[7, 1] = 44100;
tunes[7, 2] = "6689 by mu6k";

tunes[8, 0] = tune_36364689;
tunes[8, 1] = 44100;
tunes[8, 2] = "3636489 by ryg";

/**
======================
    GRAFIX
======================
**/
draw_set_color(c_black);

//Screen quad buffer
vertex_format_begin();
vertex_format_add_position();
quadFormat = vertex_format_end();

vertex_format_begin();
vertex_format_add_position();
vertex_format_add_colour();
waveFormat = vertex_format_end();

scrQuad = vertex_create_buffer();
vertex_begin(scrQuad, quadFormat);
    vertex_position(scrQuad, -1, -1);
    vertex_position(scrQuad, 1, -1);
    vertex_position(scrQuad, -1, 1);
    vertex_position(scrQuad, 1, 1);
vertex_end(scrQuad);
vertex_freeze(scrQuad);

//Info thing
valuePattern = surface_create(256, 256);
wavePattern = surface_create(256, 256);
waveVert = vertex_create_buffer();
oldVal = 0;

waveTex = surface_get_texture(wavePattern);
valueTex = surface_get_texture(valuePattern);

//HUD-related
hud_init();
application_surface_enable(false);
application_surface_draw_enable(false);

surfGUI = surface_create(winWid, winHei);
surfFG = surface_create(winWid, winHei);
surfCOMP = surface_create(winWid, winHei);

//font
draw_set_font(fntNEXA); //YE
//colour
cWHITE = make_colour_rgb(254, 244, 243);
cBLU = make_colour_rgb(32, 148, 221);
cSKY = make_colour_rgb(149, 169, 243);
cSLATE = make_colour_rgb(54, 51, 63); //Cold and edgy as fuck
cSLATE2 = make_colour_rgb(140, 104, 89); //Light Brown-ish
cLINE = make_colour_rgb(44, 37, 37); //Warm and dark.
cMINT = make_colour_rgb(157, 238, 204); //Light mint
cMINT2 = make_colour_rgb(0, 255, 161); //Normal mint
cRED = make_colour_rgb(229, 71, 94); //.. or PINK, I guess.

//Pre-clear surface
surface_set_target(valuePattern);
    draw_clear(cSLATE);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///surface heartbeat &amp; GUI stuff
hud_update();

if (!surface_exists(surfGUI)) surfGUI = surface_create(winWid, winHei);
if (!surface_exists(surfFG)) surfFG = surface_create(winWid, winHei);
//if (!surface_exists(surfCOMP)) surfCOMP = surface_create(winWid, winHei);

if (!surface_exists(valuePattern))
{
    valuePattern = surface_create(256, 256);
    valueTex = surface_get_texture(valuePattern);
}
if (!surface_exists(wavePattern))
{
    wavePattern = surface_create(256, 256);
    waveTex = surface_get_texture(wavePattern);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UPDATE TYDSP
/**
===================
    Key thing
===================
**/
//Tune speed
if (mouse_check_button(mb_left))
{
    tuneSpeed = (max(min(window_mouse_get_x() / winWid, 1), 0) - 0.5)*10;
}
else
{
    tuneSpeed = lerp(tuneSpeed, 1, 0.005);
    if (abs(1-tuneSpeed) &lt; 0.01)
    {
        tuneSpeed = 1;
    }
}

//Tunes
for (var i=1; i&lt;=array_height_2d(tunes); i++)
{
    if (keyboard_check_pressed(ord(string(i))))
    {
        tune_change(i-1);
    }
}
//Pause &amp; un-pause
if (keyboard_check_pressed(vk_space))
{
    tune_togglepause();
}
//Change rate
if (keyboard_check_pressed(vk_f2))
{
    var tuneRate = get_integer("New rate : ", 8000);
    tydsp_change_rate(tuneRate);
}
//DEBUG MODE BABYYYY
if (keyboard_check_pressed(vk_f1))
{
    QUADDAMAGE = !QUADDAMAGE;
}


if (pauseCtr &gt; 0 &amp;&amp; --pauseCtr &lt;= 0)
{
    pauseCtr = 0;
}

if (!tunePaused &amp;&amp; drawInfo)
{
    var ind = ((dspFeedInd+dspBufferNum)%dspBufferNum);

    if (!dspFree[@ ind])
    {
        var infoBuff = dspBuffers[@ ind];
        drawInfo = false;
        
        draw_valuepattern( infoBuff );
        draw_wavepattern( infoBuff );
    }
}

var wave;
if (!tunePaused)
{
    for (var i=0; i&lt;256; i++)
    {
        if (!dspBufferFull)
        {
            t += tuneSpeed;
            /**Bytebeat**/
            
            wave = script_execute(tunes[@ tuneIndex, 0], t, tuneX, tuneY, tuneU, tuneV);
            
            //wave = tune_technogg_carnival(t, X, Y, U, V);
            
            //wave = tune_hardnogg(t, X, Y, U, V);
            
            //wave = tune_hardcore_ryg(t, X, Y, U, V);
             
            //wave = tune_weeowweeow(t, X, Y, U, V);
            
            //wave = tune_lemmings_viznut(t, X, Y, U, V);
            
            //wave = tune_idontmind(t, X, Y, U, V);
            
            //wave = tune_rollin(t, X, Y, U, V);

            //wave = tune_6689(t, X, Y, U, V);
            
            //wave = tune_36364689(t, X, Y, U, V);
            
            tydsp_pend( wave );
        }
        else
        {
            break;
        }
    }
}
else
{
    //GARBAGE GAME MEOWWWWWW
    for (var i=0; i&lt;64; i++)
    {
        if (!dspBufferFull)
        {
            tydsp_pend( 0 );
        }
    }
}
tydsp_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Queue up!
//show_debug_message("Freed buffer #"+string(dspFeedInd));
tydsp_feedroom();

drawInfo = true; //Update wave info
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(valuePattern);
surface_free(wavePattern);
surface_free(surfGUI);
surface_free(surfFG);
surface_free(surfCOMP);

tydsp_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finally draw into YOUR BLOODY EYES
/*d3d_set_fog(true, cLINE, 0, 0);
draw_surface(surfFG, 2, 2);
d3d_set_fog(false, 0, 0, 0);*/
draw_clear(cSLATE);

draw_surface(surfFG, 0, 0);

d3d_set_fog(true, cLINE, 0, 0);
draw_surface(surfGUI, 3, 3); //SHADOW
d3d_set_fog(0, 0, 0, 0);

draw_surface(surfGUI, 0, 0);


/*draw_clear(cSLATE);
hud_draw_text_col_size_range(0.51, 0.51, "FPS : "+string(fps), 1, 1, cLINE, 1.0);
hud_draw_text_col_size_range(0.5, 0.5, "FPS : "+string(fps), 1, 1, cWHITE, 1.0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw into surfaces
var tunename, cRAINBOW, cAMERICAAA;
cRAINBOW = make_colour_hsv(t/128, 255, 255);
cAMERICAAA = merge_colour(cRED, cBLU, abs(sin(t*0.0005)));

/**
===============================
            GUI
===============================
**/
surface_set_target(surfGUI);
draw_clear_alpha(c_black, 0);

//Draw FPS counter
draw_set_font(fntNEXA);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
hud_draw_text_col_size_range(0.51, 0.51, "FPS : "+string(fps), 1, 1, cLINE, 1.0);
hud_draw_text_col_size_range(0.5, 0.5, "FPS : "+string(fps), 1, 1, cWHITE, 1.0);

draw_set_halign(fa_right);
draw_set_valign(fa_bottom);

tunename = tunes[@ tuneIndex, 2];
hud_draw_text_col_size_range(1, 1, "TUNE : "+string(tunename), 0.7, 0.7, cAMERICAAA, 1.0);
hud_draw_text_col_size_range(0.995, 0.995, "TUNE : "+string(tunename), 0.7, 0.7, cWHITE, 1.0);

draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_set_font(fntNEXASMALL);

if (QUADDAMAGE) //DEBUG YEAAAA
{
    hud_draw_text_col_size_range(0.01, 0.01, "Buffer index : "+string(dspBufferInd), 0.6, 0.6, cWHITE, 1.0);
    hud_draw_text_col_size_range(0.01, 0.06, "Tune speed : "+string(tuneSpeed), 0.6, 0.6, cWHITE, 1.0);
    hud_draw_text_col_size_range(0.01, 0.11, "Buffer filled : "+string(dspFilled), 0.6, 0.6, cWHITE, 1.0);
    hud_draw_text_col_size_range(0.01, 0.16, "Tune rate : "+string(tuneRate), 0.6, 0.6, cWHITE, 1.0);
}
else
{
    hud_draw_text_col_size_range(0.01, 0.01, "PRESS number 1~9 key, to change the TUNE.", 0.4, 0.4, cWHITE, 1.0);
    hud_draw_text_col_size_range(0.01, 0.05, "PRESS &amp; HOLD mouse left button, to change the SPEED.", 0.4, 0.4, cWHITE, 1.0);
    hud_draw_text_col_size_range(0.01, 0.08, "(The SPEED goes faster / slower as you move your cursor away from the center.)", 0.3, 0.3, cRAINBOW, 1.0);
    hud_draw_text_col_size_range(0.01, 0.11, "RELEASE your mouse button, to revert to normal speed.", 0.4, 0.4, cWHITE, 1.0);
    hud_draw_text_col_size_range(0.01, 0.15, "PRESS SPACE KEY to toggle between pause &amp; play.", 0.4, 0.4, cWHITE, 1.0);
    hud_draw_text_col_size_range(0.01, 0.19, "PRESS F2 to change SAMPLE RATE.", 0.4, 0.4, cWHITE, 1.0);
    hud_draw_text_col_size_range(0.01, 0.23, "PRESS F1 FOR DEBUG MODE! (And press it again, you will go back to normal again.)", 0.4, 0.4, cRAINBOW, 1.0);
}

var state;
var size = 24;

draw_set_halign(fa_right);
hud_draw_text_col_size_range(1-(size*dspBufferNum)/winWid, 0, "Buffers (yay) -&gt;", 0.4, 0.4, cRAINBOW, 1.0);
draw_set_halign(fa_left);

for (var i=0; i&lt;dspBufferNum; i++)
{
    if (i == dspBufferInd)
    {
        state = 2;
    }
    else
    {
        state = dspFree[@ i];
    }
    
    draw_sprite(sprBufferStats, state, winWid-(i*size), 0);
}

if (pauseCtr &gt; 0)
{
    texture_set_interpolation(false);
    var ctrNorm = (pauseCtr/128);
    var ctrSize = (1 - ctrNorm)*4;
    
    draw_sprite_ext(sprPAUSEPLAY, tunePaused, winWid/2, winHei/2, 8+ctrSize, 8+ctrSize, sin(pauseCtr*0.03)*8, c_white, ctrNorm);
    texture_set_interpolation(true);
}

surface_reset_target();

/**
=========================================
            ETC/FOREGROUND
=========================================
**/
surface_set_target(surfFG);

//PREPARE FOR PIXELATED DRAW, M8!
draw_clear(cSLATE);
texture_set_interpolation(false);
shader_set(shd_screenquad);
vertex_submit(scrQuad, pr_trianglestrip, valueTex);
vertex_submit(scrQuad, pr_trianglestrip, waveTex);
shader_reset();
texture_set_interpolation(true);

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
